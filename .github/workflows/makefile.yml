name: CMake CI

on:
  push:
    branches: [ "*" ]  # Trigger on all branches
  pull_request:
    branches: [ "main" ]  # Run PRs targeting main
  workflow_dispatch:
    inputs:
      generate_previews:
        description: "Generate previews"
        required: true
        default: "true"
permissions:
  contents: write  # Needed for creating releases

jobs:
  build-latexmk:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up TeXLive
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          texlive-base \
          texlive-latex-recommended \
          texlive-latex-extra \
          texlive-fonts-recommended \
          texlive-fonts-extra \
          texlive-xetex \
          texlive-bibtex-extra \
          texlive-luatex \
          texlive-science \
          latexmk \
          biber

    - name: Configure CMake with latexmk
      run: |
        cmake -S . -B build-latexmk -DCOMPILER=latexmk

    - name: Build LaTeX documents with latexmk
      run: cmake --build build-latexmk

    - name: Upload PDFs (latexmk)
      uses: actions/upload-artifact@v4
      with:
        name: output-pdfs
        path: build-latexmk/output/*.pdf
        retention-days: 5

    - name: List Uploaded Files
      run: |
        echo "Listing files in build-latexmk/output:"
        ls -R build-latexmk/output

  build-lualatex:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up TeXLive
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          texlive-base \
          texlive-latex-recommended \
          texlive-latex-extra \
          texlive-fonts-recommended \
          texlive-fonts-extra \
          texlive-xetex \
          texlive-bibtex-extra \
          texlive-luatex \
          texlive-science \
          latexmk \
          biber

    - name: Configure CMake with lualatex
      run: |
        cmake -S . -B build-lualatex -DCOMPILER=lualatex

    - name: Build LaTeX documents with lualatex
      run: cmake --build build-lualatex

  release:
    needs: [build-latexmk, build-lualatex]
    if: github.ref == 'refs/heads/main'  # Run only on the main branch
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch the full history
        fetch-tags: true  # Ensure tags are fetched

    - name: Download PDFs
      uses: actions/download-artifact@v4
      with:
        name: output-pdfs
        path: output

    - name: Fetch Latest Release Tag
      id: latest_release
      run: |
        LATEST_RELEASE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)

        echo "Latest release tag: $LATEST_RELEASE"
        echo "latest_release=$LATEST_RELEASE" >> $GITHUB_ENV

    - name: Fetch Commit Deltas
      id: fetch_commits
      run: |
        if [ -z "${{ env.latest_release }}" ] || [ "${{ env.latest_release }}" = "null" ]; then
          COMMITS=$(git log --oneline HEAD)
        else
          COMMITS=$(git log --oneline "${{ env.latest_release }}..HEAD")
        fi

        echo "Commit Deltas:"
        echo "$COMMITS"

        {
          echo "commit_deltas<<EOF"
          echo "$COMMITS"
          echo "EOF"
        } >> $GITHUB_ENV

    - name: Generate Release Notes
      id: generate_notes
      run: |
        echo "### Release Notes" > release_notes.txt
        echo "The following changes are included in this release:" >> release_notes.txt
        echo "${{ env.commit_deltas }}" | sed 's/^/- /' >> release_notes.txt

        {
          echo "notes<<EOF"
          cat release_notes.txt
          echo "EOF"
        } >> $GITHUB_ENV

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: output/*.pdf
        token: ${{ secrets.GITHUB_TOKEN }}
        tag: ${{ github.run_number }}
        name: Release ${{ github.run_number }}
        body: ${{ env.notes }}

  generate-previews:
    needs: release
    if: ${{ github.event.inputs.generate_previews == 'true' }}
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Environment
      run: |
        sudo apt-get update
        sudo apt-get install -y poppler-utils

    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: output-pdfs
        path: build/output

    - name: Generate PNG Previews
      run: |
        mkdir -p previews
        for pdf in build/output/*.pdf; do
          filename=$(basename "$pdf" .pdf)
          pdftoppm -singlefile -png "$pdf" "previews/$filename"
        done

    - name: Deploy Previews to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        personal_token: ${{ secrets.GITHUB_TOKEN }}
        external_repository: ${{ github.repository }}
        publish_branch: gh-pages
        publish_dir: previews
